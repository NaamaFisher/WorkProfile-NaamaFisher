name: WorkProfile CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: workprofile-app
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}
  IMAGE_ID: ghcr.io/${{ github.repository_owner }}/workprofile-app

jobs:

  stage1-basic-validation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Validate required files
        run: |
          test -f Dockerfile && echo "✓ Dockerfile exists"
          test -f requirements.txt && echo "✓ requirements.txt exists"
          test -f app.py && echo "✓ app.py exists"

      - name: Validate Python dependencies
        run: |
          python3 -c "import flask; print('✓ Flask import successful')"
          python3 -c "import mysql.connector; print('✓ MySQL connector import successful')"

  stage2-build-test:
    runs-on: ubuntu-latest
    needs: stage1-basic-validation

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t $IMAGE_ID:latest .

      - name: Run container
        run: |
          docker run -d -p 5000:5000 --name app $IMAGE_ID:latest

      - name: Wait for container to be ready
        run: sleep 10

      - name: Test "/" endpoint
        run: curl -f http://localhost:5000/

      - name: Test "/health" endpoint
        run: curl -f http://localhost:5000/health

      - name: Cleanup
        run: docker stop app && docker rm app

  stage3-docker-compose-test:
    runs-on: ubuntu-latest
    needs: stage2-build-test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Run 3-tier stack with Docker Compose
        working-directory: docker-compose
        run: docker-compose up -d

      - name: Wait for services to start
        run: sleep 90

      - name: Test Nginx proxy
        run: |
          curl -f http://localhost:8080/ && echo "✓ Nginx proxy works"
          curl -f http://localhost:8080/health && echo "✓ Health endpoint works"
          curl -s http://localhost:8080/health | grep "Database: Healthy" && echo "✓ Database connectivity works"

      - name: Shutdown Docker Compose
        working-directory: docker-compose
        run: docker-compose down -v

  stage4-publish:
    runs-on: ubuntu-latest
    needs: stage3-docker-compose-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Extract short SHA
        id: version
        run: echo "sha_tag=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GHCR_PAT }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

      - name: Build and Push Docker image
        run: |
          docker build -t $IMAGE_ID:latest -t $IMAGE_ID:${{ steps.version.outputs.sha_tag }} .
          docker push $IMAGE_ID:latest
          docker push $IMAGE_ID:${{ steps.version.outputs.sha_tag }}

  stage5-kubernetes-kind:
    runs-on: ubuntu-latest
    needs: stage4-publish

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up kind cluster
        uses: helm/kind-action@v1

      - name: Apply MySQL manifests
        run: |
          kubectl apply -f k8s/mysql-secret.yaml
          kubectl apply -f k8s/mysql-statefulset.yaml
          kubectl apply -f k8s/mysql-service.yaml
          kubectl wait --for=condition=ready pod/mysql-0 --timeout=600s

      - name: Apply WorkProfile manifests
        run: |
          kubectl apply -f k8s/workprofile-configmap.yaml
          kubectl apply -f k8s/workprofile-deployment.yaml
          kubectl apply -f k8s/workprofile-service.yaml
          kubectl wait --for=condition=available deployment/workprofile --timeout=600s

      - name: Port forward and test app
        run: |
          kubectl port-forward deployment/workprofile 5000:5000 &
          sleep 20
          curl -f http://localhost:5000/ && echo "✓ Kubernetes app works"
          curl -f http://localhost:5000/health && echo "✓ Kubernetes health works"
          curl -s http://localhost:5000/health | grep "Database: Healthy" && echo "✓ Kubernetes DB check passed"

  stage6-manual-instructions:
    runs-on: ubuntu-latest
    needs: stage5-kubernetes-kind
    if: ${{ always() }}
    steps:
      - name: Print manual Killercoda deployment instructions
        run: |
          echo "✅ CI/CD complete. Please follow the README for manual Killercoda deployment and verification."
